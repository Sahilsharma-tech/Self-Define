ðŸ”¹ ARITHMETIC OPERATORS
------------------------------
These are the basic math symbols we use all the time
+   â†’ Adds two numbers
      Example: 5 + 3 = 8
-   â†’ Subtracts one number from another
      Example: 10 - 4 = 6
*   â†’ Multiplies numbers
      Example: 2 * 6 = 12
/   â†’ Divides one number by another
      Example: 9 / 3 = 3
%   â†’ Gives the remainder after division
      Example: 10 % 3 = 1
      (since 3 fits in 10 three times, remainder 1)


ðŸ”¹ LOGICAL OPERATORS
------------------------------
Used when you want to check multiple conditions (mostly in if statements
&&  (AND) â†’ True only if both conditions are true  
     Example: (a > 20 && a < 50)
||  (OR)  â†’ True if any one condition is true  
     Example: (age > 20 || a < 50)
!   (NOT) â†’ Reverses the condition  
     Example: !true becomes false, and !false becomes true


ðŸ”¹ BITWISE OPERATORS
------------------------------
These work on bits (0s and 1s)
&   â†’ Bitwise AND  
|   â†’ Bitwise OR  
^   â†’ Bitwise XOR (exclusive OR)  
>>  â†’ Right shift (moves bits to the right)  
<<  â†’ Left shift (moves bits to the left)  


ðŸ”¹ COMPARISON OPERATORS
------------------------------
Used to compare two values
==  â†’ Equal to  
!=  â†’ Not equal to  
>   â†’ Greater than  
<   â†’ Less than  
>=  â†’ Greater than or equal to  
<=  â†’ Less than or equal to  
Example:
if (score >= 50) {
    cout << "Pass";
}


ðŸ”¹ SHORTHAND OPERATORS
------------------------------
Shortcuts for writing common updates to variables
a += 10;   â†’ same as a = a + 10;  
a -= 10;   â†’ same as a = a - 10;  
a /= 10;   â†’ same as a = a / 10;  
They save time and make code cleaner


ðŸ”¹ INCREMENT & DECREMENT
------------------------------
Used to increase or decrease a number by 1
++a   â†’ increases first, then uses the new value  
a++   â†’ uses the value first, then increases it  
--a   â†’ decreases first  
a--   â†’ uses then decreases  
Example:
int a = 5;
cout << ++a;  // prints 6
cout << a++;  // prints 6 (then becomes 7)
